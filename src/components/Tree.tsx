/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: kuayarts (https://sketchfab.com/kuayarts)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/pokemon-sudowoodo-tree-1f3779a3357340ff8267201572be8b58
title: Pokemon Sudowoodo - Tree
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader";
import { useLoader } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Cube_033_2_0: THREE.Mesh;
  };
  materials: {
    Cube_033: THREE.MeshStandardMaterial;
  };
};
type treeTypes = {
  position: { x: number; z: number };
  box: number;
};
type props = {
  boundary: number;
  count: number;
};
const TreeModel: React.FC<props> = ({ boundary, count }) => {
  const model = useLoader(GLTFLoader, "/stylized_tree.glb");
  const [tree, setTree] = React.useState<treeTypes[]>([]);
  model.scene.traverse((object) => {
    if (object.isMesh) {
      object.castShadow = true;
    }
  });
  const newPosition =(box:number,boundary:number)=>{
return(
  boundary/2-
  box/2-
  (boundary-box)*(Math.random()*100/100)
)
  }
  const updatePosition=(treeArray:treeTypes[],boundary:number)=>{
treeArray.forEach((tree,index)=>{
  tree.position.x=newPosition(tree.box,boundary);
  tree.position.z=newPosition(tree.box,boundary);
})
setTree(treeArray)
  }
  React.useEffect(() => {
    const tempTrees: treeTypes[] = [];
    for (let i = 0; i < count; i++) {
      tempTrees.push({ position: { x: 0, z: 0 }, box: 1 });
    }
    updatePosition(tempTrees,boundary)
  }, [boundary, count]);
  return (
    <group rotation={[0, 4, 0]}>
    {tree.map((tree,index)=>{
      return(
        <object3D position={[tree.position.x,0,tree.position.z]} scale={[5,5,5]} key={index}>
        <primitive object={model.scene.clone()} />
      </object3D>
     
      )
    })}
    </group>
  );
};

useGLTF.preload("/pokemon_sudowoodo_-_tree.glb");
export default TreeModel;
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: yonimantz (https://sketchfab.com/yonimantz09)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/stylized-tree-6d1aeea748f147789004bc03e1930d32
title: Stylized Tree
*/

// import * as THREE from "three";
// import React, { useRef, useState } from "react";
// import { useGLTF } from "@react-three/drei";
// import { GLTF } from "three-stdlib";

// type GLTFResult = GLTF & {
//   nodes: {
//     oak_01_leafes_Mat001_0: THREE.Mesh;
//     oak_01_leafes_Mat001_0_1: THREE.Mesh;
//     oak_01001_trunk_Mat001_0: THREE.Mesh;
//     oak_01001_trunk_Mat001_0_1: THREE.Mesh;
//     oak_01001_trunk_Mat001_0_2: THREE.Mesh;
//   };
//   materials: {
//     ["leafes_Mat.001"]: THREE.MeshStandardMaterial;
//     ["trunk_Mat.001"]: THREE.MeshStandardMaterial;
//   };
// };

// export function TreeModel(props: JSX.IntrinsicElements["group"]) {
//   const { nodes, materials } = useGLTF("/stylized_tree.glb") as GLTFResult;
//   const [color,setColor]=useState("green")
//   return (
//     <group {...props} dispose={null}>
//       <group rotation={[-Math.PI / 2, 0, 0]}>
//         <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
//           <mesh
//           onClick={()=>alert("Hello")}
//             castShadow
//             receiveShadow
//             geometry={nodes.oak_01_leafes_Mat001_0.geometry}
//             material={materials["leafes_Mat.001"]}

//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.oak_01_leafes_Mat001_0_1.geometry}
//             material={materials["leafes_Mat.001"]}

//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.oak_01001_trunk_Mat001_0.geometry}
//             material={materials["trunk_Mat.001"]}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.oak_01001_trunk_Mat001_0_1.geometry}
//             material={materials["trunk_Mat.001"]}
//             onClick={()=>setColor("pink")}
//             material-color={color}
//           />
//           <mesh
//             castShadow
//             receiveShadow
//             geometry={nodes.oak_01001_trunk_Mat001_0_2.geometry}
//             material={materials["trunk_Mat.001"]}
//           />
//         </group>
//       </group>
//     </group>
//   );
// }

// useGLTF.preload("/stylized_tree.glb");
